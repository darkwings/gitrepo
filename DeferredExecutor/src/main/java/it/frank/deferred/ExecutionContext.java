package it.frank.deferred;

import it.frank.deferred.Task.TaskInfo;

import java.util.List;

/**
 * Represents the context of the execution.
 * 
 * @author f.torriani
 */
public interface ExecutionContext {
		
	/**
	 * Returns the total number of tasks
	 * 
	 * @param numberOfTasks
	 */
	public Integer getNumberOfTasks();
	
	
	
	/**
	 * Returns the current step
	 * 
	 * @return
	 */
	public Integer getStep();

	/**
	 * Returns the current task {@link TaskInfo informations}
	 * 
	 * @return
	 */
	public TaskInfo getTaskInfo();

	/**
	 * Adds a warning. Implementations of this class should bind the warning to the step
	 * 
	 * @param warning
	 */
	public void addWarning(ExecutionWarning warning);
	
	/**
	 * Returns all the warnings
	 * 
	 * @return
	 */
	public List<ExecutionWarning> getWarnings();
	
	/**
	 * Returns all the warnings generated by the last step
	 * 
	 * @return
	 */
	public List<ExecutionWarning> getWarningsForLastStep();
	
	
	/**
	 * Returns the execution error that blocked the execution
	 * 
	 * @return
	 */
	public ExecutionError getExecutionError();
		
	/**
	 * Returns the data Object that can be passed from one task to another
	 * 
	 * @return
	 */
	public Object getTaskData();

	/**
	 * Sets or update the data Object that can be passed from one task to another
	 * 
	 * @return
	 */
	public void setTaskData(Object data);
	
	/**
	 * Can be used by a task (or by an observers) to know if this is the last step
	 * 
	 * @return <code>true</code> if the current step is the last step
	 */
	public boolean isLastStep();
	
	/**
	 * Can be used by a task (or by an observers) to know if this is the first step
	 * 
	 * @return <code>true</code> if the current step is the first step
	 */
	public boolean isFirstStep();
}
